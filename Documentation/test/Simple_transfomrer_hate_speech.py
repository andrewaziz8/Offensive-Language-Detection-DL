# -*- coding: utf-8 -*-
"""# Text Classification - Simple Transfomrer - Hate Speech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c3BrChiquyTJ59YQVC40xMF3xh-FLvqd

# Text Classification - Simple Transfomrer - Hate Speech
"""

pip install simpletransformers

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import re
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns
import string
import nltk
import warnings 
# %matplotlib inline
import keras

Hate_speech = pd.read_csv('https://query.data.world/s/twuhmzuhvitwqqcjh5picrq3qykr4r')
Hate_speech.head(5)

# Transformers needs an integer, not a string
# Hate_speech['label'] = Hate_speech['class']

y = keras.utils.to_categorical(Hate_speech['class'])
y = np.array(y)
y

Hate_speech['label'] = y.tolist()

Hate_speech.head()

from sklearn.model_selection import train_test_split

X = Hate_speech[['tweet', 'label']]

X_train, X_test = train_test_split(X, test_size=0.2, random_state=42)

print(X_train.shape)
print(X_train['label'].value_counts())

print(X_test.shape)
print(X_test['label'].value_counts())

X.head()

from simpletransformers.classification import ClassificationModel, ClassificationArgs
import logging

from simpletransformers.classification import MultiLabelClassificationModel, MultiLabelClassificationArgs


logging.basicConfig(level=logging.INFO)
transformers_logger = logging.getLogger("transformers")
transformers_logger.setLevel(logging.WARNING)

# Optional model configuration
# model_args = ClassificationArgs(num_train_epochs=2)

# # Create a ClassificationModel
# model = ClassificationModel("roberta", "distilroberta-base", args=model_args, use_cuda=False)


# Optional model configuration
model_args = MultiLabelClassificationArgs(num_train_epochs=1)

# Create a MultiLabelClassificationModel
model = MultiLabelClassificationModel(
    "roberta", "roberta-base", num_labels=3, args=model_args, use_cuda=False
)

# Train the model
model.train_model(X_train)

# Evaluate the model
result, model_outputs, wrong_predictions = model.eval_model(X_test)

result

model_outputs[1:20,]

wrong_predictions

predictions, raw_outputs = model.predict(['I really hated this. NOT!.'])
print(predictions)
print(raw_outputs)

